import { z } from "zod";
import { Prettify, enumMap, pojoMap } from "./utils";

export const TaskList = ['Read-through + Feedback', 'One Shot ran by the Publisher', 'One Shot ran by the Playtester', 'Campaign ran by the Publisher', 'Campaign ran by the Playtester'] as const
export const TaskSchema = z.enum(TaskList)
export type Task = z.infer<typeof TaskSchema>

export const BountyList = ['Name credits only', 'Discount Code', 'Gift Card', 'Free PDF', 'Free Hardcover Copy', 'Payment'] as const
export const BountySchema = z.enum(BountyList)
export type Bounty = z.infer<typeof BountySchema>

export const ApplicationStatusList = ['pending', 'accepted', 'rejected'] as const
export const ApplicationStatusSchema = z.enum(ApplicationStatusList)
export type ApplicationStatus = z.infer<typeof ApplicationStatusSchema>
export const ApplicationStatusMap: {[key in ApplicationStatus]: key} = enumMap(ApplicationStatusList, status => status as any)

export const PlaytestSchema = z.object({
    // Is generated by the server
    // Cannot be updated
    _id: z.string(),
    userId: z.string(),
    createdTimestamp: z.number(),

    // Must be present on creation
    // Cannot be updated later
    name: z.string().min(4).max(128),
    description: z.string().max(2000),
    privateDescription: z.string().max(600),
    tags: z.array(z.string().min(1).max(64)).max(20).refine(arr => arr.length === (new Set(arr)).size), // No duplicates
    maxPositions: z.number().optional(),
    feedbackURL: z.string().url().min(1),

    applicationDeadline: z.number().min(1),

    bounty: BountySchema,
    bountyDetails: z.string().max(300),
    bountyContract: z.discriminatedUnion('type', [
        z.object({ type: z.literal('template'), templateValues: z.record(z.string().max(64), z.string().max(600)), useNDA: z.boolean() }),
        z.object({ type: z.literal('custom'), text: z.string().max(5000) })
    ]),

    task: TaskSchema,


    // Initialized by the server on creation
    // Can be updated later
    closedManually: z.boolean(),
    applications: z.array(z.object({
        applicantId: z.string(),
        createdTimestamp: z.number(),
        status: ApplicationStatusSchema,
    })),
})


// On creation
export type Playtest = z.infer<typeof PlaytestSchema>

export const CreatablePlaytestSchema = PlaytestSchema.omit({ 
    _id: true, 
    userId: true, 
    createdTimestamp: true, 
    closedManually: true,
    applications: true,
})
export type CreatablePlaytest = Prettify<z.infer<typeof CreatablePlaytestSchema>>

export const newPlaytest = {
    name: '',
    description: '',
    privateDescription: '',
    feedbackURL: '',
    tags: [],
    applicationDeadline: 0,
    bounty: 'Name credits only',
    bountyDetails: '',
    bountyContract: { type: 'template', templateValues: {}, useNDA: false },
    task: 'Read-through + Feedback',
} satisfies CreatablePlaytest


// On list
export const PlaytestSummarySchema = PlaytestSchema.pick({
    _id: true,
    userId: true,
    name: true, 
    createdTimestamp: true,

    description: true,
    task: true,
    tags: true,
    maxPositions: true,

    applicationDeadline: true,
    closedManually: true,

    bounty: true,
    bountyDetails: true,

    applications: true,
})
export type PlaytestSummary = z.infer<typeof PlaytestSummarySchema>



// Search Params
export const PerPageSchema = z.literal(10).or(z.literal(25)).or(z.literal(50))
export const DaysList = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'] as const
export const DaysSchema = z.enum(DaysList)
export type Days = z.infer<typeof DaysSchema>

export const PlaytestSearchParamSchema = z.object({
    includeClosed: z.boolean(),
    includesMe: z.boolean(),

    includeAuthors: z.array(z.string().max(32)).max(20),
    excludeAuthors: z.array(z.string().max(32)).max(20),

    includeTags: z.array(z.string().min(1).max(64)).max(20),
    excludeTags: z.array(z.string().min(1).max(64)).max(20),
    
    // A number of milliseconds which is offset from Date.now().
    // For example, putting -5 * 60 * 1000 in this field means "any playtest published in the last 5 minutes"
    after: z.number(),

    acceptableBounties: z.record(BountySchema, z.boolean()),
    acceptableTasks: z.record(TaskSchema, z.boolean()),
}).partial()

export type PlaytestSearchParams = z.infer<typeof PlaytestSearchParamSchema>

export const DefaultSearchParams: PlaytestSearchParams = {}